# automatically generated by the FlatBuffers compiler, do not modify

# namespace: io

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class PLAType(object):
    """
    An enumeration representing the types of PLA (Programmable Logic Array).

    Attributes:
        DNF (int): Disjunctive Normal Form.
        CNF (int): Conjunctive Normal Form.
    """
    DNF = 0
    CNF = 1


class PLA(object):
    """
    A class representing a Programmable Logic Array (PLA) structure.

    Attributes:
        _tab (flatbuffers.table.Table): The FlatBuffers table for the PLA.

    Methods:
        GetRootAs: Retrieves the root of the PLA from a buffer.
        GetRootAsPLA: Deprecated method to retrieve the root of the PLA.
        PLABufferHasIdentifier: Checks if the buffer has the PLA identifier.
        Init: Initializes the PLA with a buffer and position.
        Type: Retrieves the type of the PLA.
        Products: Retrieves a product at a specified index.
        ProductsAsNumpy: Retrieves the products as a numpy array.
        ProductsLength: Retrieves the number of products.
        ProductsIsNone: Checks if there are no products.
        NumProducts: Retrieves the number of products.
        NumEventsPerProduct: Retrieves the number of events per product.
    """
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf: bytes, offset: int = 0) -> 'PLA':
        """
        Retrieves the root of the PLA from a buffer.

        Args:
            buf (bytes): The buffer containing the PLA data.
            offset (int): The offset to start reading from the buffer.

        Returns:
            PLA: The root PLA object.
        """
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PLA()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPLA(cls, buf: bytes, offset: int = 0) -> 'PLA':
        """
        Deprecated method to retrieve the root of the PLA from a buffer.

        Args:
            buf (bytes): The buffer containing the PLA data.
            offset (int): The offset to start reading from the buffer.

        Returns:
            PLA: The root PLA object.
        """
        return cls.GetRootAs(buf, offset)

    @classmethod
    def PLABufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool = False) -> bool:
        """
        Checks if the buffer has the PLA identifier.

        Args:
            buf (bytes): The buffer to check.
            offset (int): The offset to start checking from.
            size_prefixed (bool): Whether the buffer is size-prefixed.

        Returns:
            bool: True if the buffer has the PLA identifier, False otherwise.
        """
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x50\x4C\x41", size_prefixed=size_prefixed)

    def Init(self, buf: bytes, pos: int):
        """
        Initializes the PLA with a buffer and position.

        Args:
            buf (bytes): The buffer containing the PLA data.
            pos (int): The position in the buffer to initialize from.
        """
        self._tab = flatbuffers.table.Table(buf, pos)

    def Type(self) -> int:
        """
        Retrieves the type of the PLA.

        Returns:
            int: The type of the PLA, either DNF or CNF.
        """
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    def Products(self, j: int) -> int:
        """
        Retrieves a product at a specified index.

        Args:
            j (int): The index of the product to retrieve.

        Returns:
            int: The product at the specified index.
        """
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags,
                                 a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    def ProductsAsNumpy(self):
        """
        Retrieves the products as a numpy array.

        Returns:
            np.ndarray: The products as a numpy array, or 0 if none.
        """
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    def ProductsLength(self) -> int:
        """
        Retrieves the number of products.

        Returns:
            int: The number of products.
        """
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    def ProductsIsNone(self) -> bool:
        """
        Checks if there are no products.

        Returns:
            bool: True if there are no products, False otherwise.
        """
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    def NumProducts(self) -> int:
        """
        Retrieves the number of products.

        Returns:
            int: The number of products.
        """
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    def NumEventsPerProduct(self) -> int:
        """
        Retrieves the number of events per product.

        Returns:
            int: The number of events per product.
        """
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0


def PLAStart(builder: flatbuffers.Builder):
    """
    Starts the construction of a PLA object.

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
    """
    builder.StartObject(4)


def Start(builder: flatbuffers.Builder):
    """
    Starts the construction of a PLA object (alias for PLAStart).

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
    """
    PLAStart(builder)


def PLAAddType(builder: flatbuffers.Builder, type: int):
    """
    Adds the type to the PLA object being constructed.

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        type (int): The type of the PLA.
    """
    builder.PrependInt8Slot(0, type, 0)


def AddType(builder: flatbuffers.Builder, type: int):
    """
    Adds the type to the PLA object being constructed (alias for PLAAddType).

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        type (int): The type of the PLA.
    """
    PLAAddType(builder, type)


def PLAAddProducts(builder: flatbuffers.Builder, products: int):
    """
    Adds the products to the PLA object being constructed.

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        products (int): The offset to the products vector.
    """
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(products), 0)


def AddProducts(builder: flatbuffers.Builder, products: int):
    """
    Adds the products to the PLA object being constructed (alias for PLAAddProducts).

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        products (int): The offset to the products vector.
    """
    PLAAddProducts(builder, products)


def PLAStartProductsVector(builder: flatbuffers.Builder, numElems: int) -> int:
    """
    Starts the construction of a products vector for the PLA object.

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        numElems (int): The number of elements in the products vector.

    Returns:
        int: The offset to the start of the products vector.
    """
    return builder.StartVector(1, numElems, 1)


def StartProductsVector(builder: flatbuffers.Builder, numElems: int) -> int:
    """
    Starts the construction of a products vector for the PLA object (alias for PLAStartProductsVector).

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        numElems (int): The number of elements in the products vector.

    Returns:
        int: The offset to the start of the products vector.
    """
    return PLAStartProductsVector(builder, numElems)


def PLAAddNumProducts(builder: flatbuffers.Builder, numProducts: int):
    """
    Adds the number of products to the PLA object being constructed.

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        numProducts (int): The number of products.
    """
    builder.PrependUint64Slot(2, numProducts, 0)


def AddNumProducts(builder: flatbuffers.Builder, numProducts: int):
    """
    Adds the number of products to the PLA object being constructed (alias for PLAAddNumProducts).

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        numProducts (int): The number of products.
    """
    PLAAddNumProducts(builder, numProducts)


def PLAAddNumEventsPerProduct(builder: flatbuffers.Builder, numEventsPerProduct: int):
    """
    Adds the number of events per product to the PLA object being constructed.

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        numEventsPerProduct (int): The number of events per product.
    """
    builder.PrependUint64Slot(3, numEventsPerProduct, 0)


def AddNumEventsPerProduct(builder: flatbuffers.Builder, numEventsPerProduct: int):
    """
    Adds the number of events per product to the PLA object being constructed (alias for PLAAddNumEventsPerProduct).

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.
        numEventsPerProduct (int): The number of events per product.
    """
    PLAAddNumEventsPerProduct(builder, numEventsPerProduct)


def PLAEnd(builder: flatbuffers.Builder) -> int:
    """
    Ends the construction of a PLA object.

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.

    Returns:
        int: The offset to the end of the PLA object.
    """
    return builder.EndObject()


def End(builder: flatbuffers.Builder) -> int:
    """
    Ends the construction of a PLA object (alias for PLAEnd).

    Args:
        builder (flatbuffers.Builder): The FlatBuffers builder.

    Returns:
        int: The offset to the end of the PLA object.
    """
    return PLAEnd(builder)