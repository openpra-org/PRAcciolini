# automatically generated by the FlatBuffers compiler, do not modify

# namespace: io

import flatbuffers
from flatbuffers.compat import import_numpy
from canopy.io.Buffer import Buffer
from canopy.io.SubGraph import SubGraph
from typing import Optional
np = import_numpy()

class DAGs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DAGs()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDAGs(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DAGsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x50\x59\x31", size_prefixed=size_prefixed)

    # DAGs
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DAGs
    def Subgraphs(self, j: int) -> Optional[SubGraph]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = SubGraph()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DAGs
    def SubgraphsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DAGs
    def SubgraphsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DAGs
    def Buffers(self, j: int) -> Optional[Buffer]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Buffer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DAGs
    def BuffersLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DAGs
    def BuffersIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DAGs
    def Name(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DAGs
    def Description(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DAGsStart(builder: flatbuffers.Builder):
    builder.StartObject(4)

def Start(builder: flatbuffers.Builder):
    DAGsStart(builder)

def DAGsAddSubgraphs(builder: flatbuffers.Builder, subgraphs: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(subgraphs), 0)

def AddSubgraphs(builder: flatbuffers.Builder, subgraphs: int):
    DAGsAddSubgraphs(builder, subgraphs)

def DAGsStartSubgraphsVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartSubgraphsVector(builder, numElems: int) -> int:
    return DAGsStartSubgraphsVector(builder, numElems)

def DAGsAddBuffers(builder: flatbuffers.Builder, buffers: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buffers), 0)

def AddBuffers(builder: flatbuffers.Builder, buffers: int):
    DAGsAddBuffers(builder, buffers)

def DAGsStartBuffersVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartBuffersVector(builder, numElems: int) -> int:
    return DAGsStartBuffersVector(builder, numElems)

def DAGsAddName(builder: flatbuffers.Builder, name: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder: flatbuffers.Builder, name: int):
    DAGsAddName(builder, name)

def DAGsAddDescription(builder: flatbuffers.Builder, description: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder: flatbuffers.Builder, description: int):
    DAGsAddDescription(builder, description)

def DAGsEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return DAGsEnd(builder)
