from __future__ import annotations

import flatbuffers
import numpy as np

import typing

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class Buffer(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Buffer: ...
  @classmethod
  def GetRootAsBuffer(cls, buf: bytes, offset: int) -> Buffer: ...
  @classmethod
  def BufferBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Data(self, i: int) -> typing.List[int]: ...
  def DataAsNumpy(self) -> np.ndarray: ...
  def DataLength(self) -> int: ...
  def DataIsNone(self) -> bool: ...
def BufferStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def BufferAddData(builder: flatbuffers.Builder, data: uoffset) -> None: ...
def BufferStartDataVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartDataVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def BufferEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

