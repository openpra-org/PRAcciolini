from __future__ import annotations

import flatbuffers
import numpy as np

import typing
from canopy.io.TensorType import TensorType

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class Tensor(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Tensor: ...
  @classmethod
  def GetRootAsTensor(cls, buf: bytes, offset: int) -> Tensor: ...
  @classmethod
  def TensorBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Shape(self, i: int) -> typing.List[int]: ...
  def ShapeAsNumpy(self) -> np.ndarray: ...
  def ShapeLength(self) -> int: ...
  def ShapeIsNone(self) -> bool: ...
  def Type(self) -> typing.Literal[TensorType.UINT32, TensorType.UINT4, TensorType.UINT8, TensorType.UINT16, TensorType.UINT64, TensorType.FLOAT16, TensorType.FLOAT32, TensorType.FLOAT64]: ...
  def BufferIdx(self) -> int: ...
  def Name(self) -> str | None: ...
def TensorStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def TensorAddShape(builder: flatbuffers.Builder, shape: uoffset) -> None: ...
def TensorStartShapeVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartShapeVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TensorAddType(builder: flatbuffers.Builder, type: typing.Literal[TensorType.UINT32, TensorType.UINT4, TensorType.UINT8, TensorType.UINT16, TensorType.UINT64, TensorType.FLOAT16, TensorType.FLOAT32, TensorType.FLOAT64]) -> None: ...
def TensorAddBufferIdx(builder: flatbuffers.Builder, bufferIdx: int) -> None: ...
def TensorAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def TensorEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

