from __future__ import annotations

import flatbuffers
import numpy as np

import typing
from canopy.io.OpCode import OpCode
from canopy.io.OperatorArgs import OperatorArgs
from flatbuffers import table

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class Operator(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Operator: ...
  @classmethod
  def GetRootAsOperator(cls, buf: bytes, offset: int) -> Operator: ...
  @classmethod
  def OperatorBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Opcode(self) -> typing.Literal[OpCode.BITWISE_NOT, OpCode.BITWISE_AND, OpCode.BITWISE_OR, OpCode.BITWISE_XOR, OpCode.BITWISE_K_OF_N, OpCode.BITWISE_NAND, OpCode.BITWISE_NOR, OpCode.BITWISE_XNOR, OpCode.BITMASK_ZEROS, OpCode.BITMASK_ONES, OpCode.BITWISE_CONV_ND, OpCode.BITWISE_CONV_1D, OpCode.BITWISE_CONV_2D, OpCode.BITWISE_FFT_ND, OpCode.BITWISE_FFT_1D, OpCode.BITWISE_FFT_2D, OpCode.LOGICAL_NOT, OpCode.LOGICAL_AND, OpCode.LOGICAL_OR, OpCode.LOGICAL_XOR, OpCode.LOGICAL_NAND, OpCode.LOGICAL_NOR, OpCode.LOGICAL_XNOR, OpCode.RESHAPE, OpCode.MC_EXPECT_VAL, OpCode.MC_VAR_LOSS]: ...
  def ArgsType(self) -> typing.Literal[OperatorArgs.NONE, OperatorArgs.KofNArgs, OperatorArgs.ReshapeArgs, OperatorArgs.MonteCarloExpectedValueOptions]: ...
  def Args(self) -> table.Table | None: ...
  def Inputs(self, i: int) -> typing.List[int]: ...
  def InputsAsNumpy(self) -> np.ndarray: ...
  def InputsLength(self) -> int: ...
  def InputsIsNone(self) -> bool: ...
  def Outputs(self, i: int) -> typing.List[int]: ...
  def OutputsAsNumpy(self) -> np.ndarray: ...
  def OutputsLength(self) -> int: ...
  def OutputsIsNone(self) -> bool: ...
  def Name(self) -> str | None: ...
def OperatorStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def OperatorAddOpcode(builder: flatbuffers.Builder, opcode: typing.Literal[OpCode.BITWISE_NOT, OpCode.BITWISE_AND, OpCode.BITWISE_OR, OpCode.BITWISE_XOR, OpCode.BITWISE_K_OF_N, OpCode.BITWISE_NAND, OpCode.BITWISE_NOR, OpCode.BITWISE_XNOR, OpCode.BITMASK_ZEROS, OpCode.BITMASK_ONES, OpCode.BITWISE_CONV_ND, OpCode.BITWISE_CONV_1D, OpCode.BITWISE_CONV_2D, OpCode.BITWISE_FFT_ND, OpCode.BITWISE_FFT_1D, OpCode.BITWISE_FFT_2D, OpCode.LOGICAL_NOT, OpCode.LOGICAL_AND, OpCode.LOGICAL_OR, OpCode.LOGICAL_XOR, OpCode.LOGICAL_NAND, OpCode.LOGICAL_NOR, OpCode.LOGICAL_XNOR, OpCode.RESHAPE, OpCode.MC_EXPECT_VAL, OpCode.MC_VAR_LOSS]) -> None: ...
def OperatorAddArgsType(builder: flatbuffers.Builder, argsType: typing.Literal[OperatorArgs.NONE, OperatorArgs.KofNArgs, OperatorArgs.ReshapeArgs, OperatorArgs.MonteCarloExpectedValueOptions]) -> None: ...
def OperatorAddArgs(builder: flatbuffers.Builder, args: uoffset) -> None: ...
def OperatorAddInputs(builder: flatbuffers.Builder, inputs: uoffset) -> None: ...
def OperatorStartInputsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartInputsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def OperatorAddOutputs(builder: flatbuffers.Builder, outputs: uoffset) -> None: ...
def OperatorStartOutputsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartOutputsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def OperatorAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def OperatorEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

